import csv
import os

# Constants
FIELDNAMES = ["Employee_Id", "Employee_Name", "Employee_Salary", "Employee_Designation"]

def create_csv_file(file_name):
    """Create CSV file with headers if not exists"""
    if not os.path.exists(file_name):
        with open(file_name, "w", newline="") as file:
            writer = csv.DictWriter(file, fieldnames=FIELDNAMES)
            writer.writeheader()
            print("‚úÖ Database Created!")

def add_new_employee(file_name, employee_id, name, salary, designation):
    """Add new employee to CSV"""
    try:
        with open(file_name, 'a', newline="") as file:
            writer = csv.DictWriter(file, fieldnames=FIELDNAMES)
            writer.writerow({
                "Employee_Id": employee_id,
                "Employee_Name": name,
                "Employee_Salary": salary,
                "Employee_Designation": designation
            })
        print("‚úÖ New Employee Added!")
    except Exception as e:
        print(f"‚ùå Error adding employee: {str(e)}")

def view_all_employees(file_name, employee_id=None):
    """View all or specific employee"""
    try:
        with open(file_name) as file:
            reader = csv.DictReader(file)
            if employee_id is None:
                print("\nüìã All Employees:")
                for row in reader:
                    print(row)
            else:
                print("\nüîç Employee Details:")
                for row in reader:
                    if int(row["Employee_Id"]) == employee_id:
                        print(row)
                        return
                print("‚ùå Employee not found!")
    except Exception as e:
        print(f"‚ùå Error reading employees: {str(e)}")

def update_employee_details(file_name, employee_id, name=None, salary=None, designation=None):
    """Update employee details"""
    try:
        rows = []
        updated = False
        
        with open(file_name) as file:
            reader = csv.DictReader(file)
            for row in reader:
                if int(row["Employee_Id"]) == employee_id:
                    if name:
                        row["Employee_Name"] = name
                        updated = True
                    if salary:
                        row["Employee_Salary"] = salary
                        updated = True
                    if designation:
                        row["Employee_Designation"] = designation
                        updated = True
                rows.append(row)

        if updated:
            with open(file_name, 'w', newline="") as file:
                writer = csv.DictWriter(file, fieldnames=FIELDNAMES)
                writer.writeheader()
                writer.writerows(rows)
            print("‚úÖ Employee updated successfully!")
        else:
            print("‚ÑπÔ∏è No changes made")
    except Exception as e:
        print(f"‚ùå Error updating employee: {str(e)}")

def delete_employee(file_name, employee_id):
    """Delete employee by ID"""
    try:
        rows = []
        deleted = False
        
        with open(file_name) as file:
            reader = csv.DictReader(file)
            for row in reader:
                if int(row["Employee_Id"]) != employee_id:
                    rows.append(row)
                else:
                    deleted = True

        if deleted:
            with open(file_name, 'w', newline="") as file:
                writer = csv.DictWriter(file, fieldnames=FIELDNAMES)
                writer.writeheader()
                writer.writerows(rows)
            print("‚úÖ Employee deleted successfully!")
        else:
            print("‚ùå Employee not found!")
    except Exception as e:
        print(f"‚ùå Error deleting employee: {str(e)}")

# Main program
if __name__ == "__main__":
    org_name = input("Enter your organization name: ").lower().strip().replace(" ", "_")
    file_name = f"{org_name}.csv"
    create_csv_file(file_name)

    while True:
        print("\nüè¢ Employee Management System")
        print("1. Add new Employee")
        print("2. View all employees")
        print("3. Search employee by ID")
        print("4. Update employee details")
        print("5. Delete employee")
        print("6. Exit")

        try:
            choice = int(input("Select operation (1-6): "))
            
            if choice == 1:
                emp_id = int(input("Employee ID: "))
                name = input("Name: ")
                salary = input("Salary: ")
                designation = input("Designation: ")
                add_new_employee(file_name, emp_id, name, salary, designation)
                
            elif choice == 2:
                view_all_employees(file_name)
                
            elif choice == 3:
                emp_id = int(input("Enter Employee ID: "))
                view_all_employees(file_name, emp_id)
                
            elif choice == 4:
                emp_id = int(input("Employee ID to update: "))
                print("\nWhat to update?")
                print("1. Name")
                print("2. Salary")
                print("3. Designation")
                sub_choice = int(input("Select (1-3): "))
                
                if sub_choice == 1:
                    name = input("New name: ")
                    update_employee_details(file_name, emp_id, name=name)
                elif sub_choice == 2:
                    salary = input("New salary: ")
                    update_employee_details(file_name, emp_id, salary=salary)
                elif sub_choice == 3:
                    designation = input("New designation: ")
                    update_employee_details(file_name, emp_id, designation=designation)
                else:
                    print("‚ùå Invalid choice!")
                    
            elif choice == 5:
                emp_id = int(input("Employee ID to delete: "))
                delete_employee(file_name, emp_id)
                
            elif choice == 6:
                print("üëã Exiting...")
                break
                
            else:
                print("‚ùå Invalid choice!")
                
        except ValueError:
            print("‚ùå Please enter a valid number!")
        except Exception as e:
            print(f"‚ùå An error occurred: {str(e)}")

        cont = input("\nContinue? (y/n): ").lower()
        if cont != 'y':
            print("üëã Exiting...")
            break
